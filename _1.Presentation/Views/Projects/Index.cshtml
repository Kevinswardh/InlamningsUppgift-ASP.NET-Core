@model _1.PresentationLayer.ViewModels.ProjectsViewModels.ProjectsViewModel

@{
    ViewData["Title"] = "Project page";
    Layout = "~/Views/Shared/_AppLayout.cshtml";
}

<section class="content-section">
    <div class="section-header">
        <h2 class="section-title">Projects</h2>
        <button class="add-button">
            <i class="ti ti-plus"></i>
            <span>Add Project</span>
        </button>
    </div>

    <partial name="~/Views/_Partials/ProjectListPartials/_ProjectTabList.cshtml" model="Model" />

    <div class="project-grid">
        @foreach (var project in Model.Projects)
        {
            <partial name="~/Views/_Partials/ProjectListPartials/_ProjectCard.cshtml" model="project" />
        }

    </div>

</section>
        <partial name="~/Views/_Partials/ProjectListPartials/_ProjectPagination.cshtml" model="Model" />
  
<partial name="~/Views/_Partials/ProjectListPartials/_AddProjectModal.cshtml"
         model="new _1.PresentationLayer.ViewModels.ProjectsViewModels.CreateProjectViewModel()" />

<partial name="~/Views/_Partials/ProjectListPartials/_EditProjectModal.cshtml"
         model="new _1.PresentationLayer.ViewModels.ProjectsViewModels.EditProjectViewModel()" />

<partial name="~/Views/_Partials/ProjectListPartials/_DeleteProjectModal.cshtml"
         model="new _1.PresentationLayer.ViewModels.ProjectsViewModels.DeleteProjectViewModel()" />





<!-- Script 1: Modalhantering -->
<script>
    const addButton = document.querySelector(".add-button");
    const modalOverlay = document.getElementById("modalOverlay");
    const modal = document.getElementById("projectModal");
    const closeButton = modalOverlay.querySelector(".close-icon");
    const modalTitle = modal.querySelector(".form-title");
    const submitButton = modal.querySelector(".submit-button");

    let lastModalTrigger = null;

    function safelySetTrigger(type) {
        lastModalTrigger = type;
        setTimeout(() => {
            lastModalTrigger = null;
        }, 300);
    }

    function resetModal() {
        modal.querySelectorAll(".form-group").forEach((group) => group.style.display = "block");
        const imageField = document.getElementById("imageUploadSection");
        if (imageField) imageField.style.display = "flex";
        const oldMessage = modal.querySelector("#delete-confirm-message");
        if (oldMessage) oldMessage.remove();
        submitButton.classList.remove("danger-button");
        const memberLabel = modal.querySelector("label.form-label");
        if (memberLabel) memberLabel.style.display = "block";
        modal.querySelectorAll(".member-tag").forEach((tag) => tag.remove());
        modal.querySelectorAll("input").forEach((input) => input.value = "");
        const editor = modal.querySelector(".ql-editor");
        if (editor) {
            editor.innerHTML = "<p><br></p>";
            editor.classList.add("ql-blank");
        }
    }

    function showOnlyMemberField() {
        modal.querySelectorAll(".form-group").forEach((group) => {
            const hasMemberInput = group.querySelector("#memberInput");
            group.style.display = hasMemberInput ? "block" : "none";
        });
        const imageField = document.getElementById("imageUploadSection");
        if (imageField) imageField.style.display = "none";
        const memberLabel = modal.querySelector("label.form-label");
        if (memberLabel && memberLabel.textContent.trim() === "Members") {
            memberLabel.style.display = "none";
        }
        submitButton.classList.remove("danger-button");
    }

    function resetMemberInput() {
        const memberInput = document.getElementById("memberInput");
        const membersTagsContainer = document.getElementById("membersTagsContainer");
        const suggestionsList = document.getElementById("suggestionsList");
        if (memberInput) memberInput.value = "";
        if (membersTagsContainer) membersTagsContainer.innerHTML = "";
        if (suggestionsList) suggestionsList.innerHTML = "";
    }

    // ➕ ADD PROJECT
    addButton.addEventListener("click", () => {
        closeMenusExcept();
        resetModal();
        modal.dataset.mode = "create";
        modalTitle.textContent = "Add Project";
        submitButton.textContent = "Create";
        modalOverlay.classList.add("active");
        safelySetTrigger("add");
        modal.scrollTop = 0;
    });

    // ✏️ EDIT PROJECT
    document.querySelectorAll(".menu-item-edit").forEach((editBtn) => {
        editBtn.addEventListener("click", async (e) => {
            e.stopPropagation();
            closeMenusExcept();

            const projectId = editBtn.dataset.projectId;
            const editModalOverlay = document.getElementById("editProjectModalOverlay");
            const editModal = document.getElementById("editProjectModal");

            try {
                const response = await fetch(`/Projects/GetProjectJson?id=${projectId}`);
                if (!response.ok) throw new Error("Kunde inte hämta projektdata");
                const project = await response.json();

                // 🔄 Fyll fält
                editModal.querySelector("input[name='Id']").value = project.id;
                editModal.querySelector("input[name='Name']").value = project.name;
                editModal.querySelector("input[name='ClientEmail']").value = project.clientEmail;
                editModal.querySelector("input[name='EndDate']").value = project.endDate?.split("T")[0] || "";
                editModal.querySelector("input[name='Budget']").value = project.budget ?? 0;

                // 🖼️ Bild – sätt preview & behåll imageUrl i hidden fält
                const preview = editModal.querySelector("#editUploadPreview");
                if (preview && project.imageUrl) preview.src = project.imageUrl;

                const hiddenImageInput = editModal.querySelector("#editImageUrlHidden");
                if (hiddenImageInput) hiddenImageInput.value = project.imageUrl ?? "";

                // 📝 Quill
                editQuill.root.innerHTML = project.description || "<p><br></p>";
                document.getElementById("edit-hidden-description").value = project.description || "";

                // 👥 Medlemmar
                selectedEditMembers = [];
                editMembersTagsContainer.innerHTML = "";
                editMemberHiddenFieldsContainer.innerHTML = "";

                project.members.forEach(m => {
                    selectedEditMembers.push(m.id);
                    const member = membersDataEdit[m.id];
                    if (!member) return;

                    const tag = document.createElement("div");
                    tag.className = "member-tag";
                    tag.dataset.id = m.id;
                    tag.innerHTML = `
                        <img src="${member.avatar}" class="project-member-avatar" alt="${member.name}" />
                        <span class="member-name">${member.name}</span>
                        <img src="https://cdn.builder.io/api/v1/image/assets/2a274513ffcd4318aca721aa009fe223/dfff3394c6759651f9dc2423c2fe281189809b34?placeholderIfAbsent=true" class="remove-icon" alt="Remove" />
                    `;
                    tag.querySelector(".remove-icon").addEventListener("click", () => {
                        tag.remove();
                        selectedEditMembers = selectedEditMembers.filter(mid => mid !== m.id);
                        editMemberHiddenFieldsContainer.querySelectorAll(`[data-id='${m.id}']`).forEach(el => el.remove());
                    });

                    editMembersTagsContainer.appendChild(tag);

                    const input = document.createElement("input");
                    input.type = "hidden";
                    input.name = "MemberIds";
                    input.value = m.id;
                    input.dataset.id = m.id;
                    editMemberHiddenFieldsContainer.appendChild(input);
                });

                editModalOverlay.classList.add("active");
                safelySetTrigger("edit");
                editModal.scrollTop = 0;

            } catch (err) {
                alert("Kunde inte ladda projektet: " + err.message);
            }
        });
    });


    // 👥 ADD MEMBER
    document.querySelectorAll(".menu-item").forEach((btn) => {
        const label = btn.querySelector(".menu-text");
        if (label && label.textContent.trim() === "Add Member") {
            btn.addEventListener("click", (e) => {
                e.stopPropagation();
                closeMenusExcept();
                resetModal();
                modal.dataset.mode = "add-member";
                modalTitle.textContent = "Add Member";
                submitButton.textContent = "Save";
                modalOverlay.classList.add("active");
                showOnlyMemberField();
                resetMemberInput();
                safelySetTrigger("add-member");
                modal.scrollTop = 0;
            });
        }
    });

    // 🗑️ DELETE PROJECT
    document.querySelectorAll(".menu-item-delete").forEach((btn) => {
        btn.addEventListener("click", (e) => {
            e.stopPropagation();
            closeMenusExcept();
            const modalOverlay = document.getElementById("deleteProjectModalOverlay");
            modalOverlay.classList.add("active");
            const projectId = btn.dataset.projectId;
            const projectName = btn.dataset.projectName;
            modalOverlay.querySelector("input[name='Id']").value = projectId;
            modalOverlay.querySelector(".form-label strong").textContent = projectName;
        });
    });

    // ❌ STÄNG MODAL
    closeButton.addEventListener("click", () => {
        modalOverlay.classList.remove("active");
        const deleteOverlay = document.getElementById("deleteProjectModalOverlay");
        if (deleteOverlay?.classList.contains("active")) {
            deleteOverlay.classList.remove("active");
        }
        resetModal();
    });
    // ❌ STÄNG EDIT MODAL
    const editCloseButton = document.querySelector("#editProjectModal .close-icon");
    const editModalOverlay = document.getElementById("editProjectModalOverlay");

    editCloseButton.addEventListener("click", () => {
        editModalOverlay.classList.remove("active");
        // Rensa fält om du vill, ex:
        editQuill.root.innerHTML = "<p><br></p>";
        document.getElementById("edit-hidden-description").value = "";
        editMembersTagsContainer.innerHTML = "";
        editMemberHiddenFieldsContainer.innerHTML = "";
        selectedEditMembers = [];
    });

</script>


<!-- 2. Quill Editor + Cursor Fix -->
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<script>
    const quill = new Quill("#editor-container", {
        theme: "snow",
        placeholder: "Type something...",
        modules: {
            toolbar: [
                [{ header: [1, 2, false] }],
                ["bold", "italic", "underline"],
                ["blockquote", "code-block"],
                [{ list: "ordered" }, { list: "bullet" }],
                ["clean"],
            ],
        },
    });

    let savedRange = null;
    quill.on("selection-change", function (range) {
        if (range) {
            savedRange = range;
        }
    });

    document
        .querySelector(".ql-toolbar")
        .addEventListener("mousedown", function () {
            if (savedRange) {
                setTimeout(() => {
                    quill.setSelection(savedRange.index, savedRange.length);
                }, 0);
            }
        });
</script>
<!--Quill save-->
<script>
    const hiddenDescription = document.getElementById("hidden-description");

    // Update the hidden description input whenever the content changes in Quill editor
    quill.on('text-change', function (delta, oldDelta, source) {
        hiddenDescription.value = quill.root.innerHTML;  // Save the HTML content of Quill to the hidden field
    });
</script>


<!-- 3. Header-menyer: Profil, Inställningar & Notifications -->
<script>
    const profileToggle = document.getElementById("profileToggle");
    const profileMenu = document.getElementById("profileMenu");
    const settingsToggle = document.getElementById("settingsToggle");
    const settingsMenu = document.getElementById("settingsMenu");
    const notificationsToggle = document.getElementById(
        "notificationsToggle"
    );
    const notificationsCard = document.getElementById("notificationsCard");

    // 🔁 För att också stänga projektdropdowns
    const allDropdowns = document.querySelectorAll(".dropdown-menu");

    function closeMenusExcept(exception) {
        if (exception !== "profile") profileMenu.hidden = true;
        if (exception !== "settings") settingsMenu.hidden = true;
        if (exception !== "dropdown") {
            allDropdowns.forEach((dropdown) => {
                dropdown.style.display = "none";
            });
        }
        if (exception !== "notifications" && notificationsCard) {
            notificationsCard.hidden = true;
        }
    }

    profileToggle.addEventListener("click", (e) => {
        e.stopPropagation();
        const isHidden = profileMenu.hidden;
        closeMenusExcept("profile");
        profileMenu.hidden = !isHidden;
    });

    settingsToggle.addEventListener("click", (e) => {
        e.stopPropagation();
        const isHidden = settingsMenu.hidden;
        closeMenusExcept("settings");
        settingsMenu.hidden = !isHidden;
    });

    notificationsToggle?.addEventListener("click", (e) => {
        e.stopPropagation();
        const isHidden = notificationsCard.hidden;
        closeMenusExcept("notifications");
        notificationsCard.hidden = !isHidden;
    });

    document.addEventListener("click", (e) => {
        if (
            !profileMenu.contains(e.target) &&
            !profileToggle.contains(e.target) &&
            !settingsMenu.contains(e.target) &&
            !settingsToggle.contains(e.target) &&
            (!notificationsCard || !notificationsCard.contains(e.target)) &&
            (!notificationsToggle || !notificationsToggle.contains(e.target))
        ) {
            closeMenusExcept(); // Stänger alla
        }
    });
</script>

<!-- 5. Modal Bakgrund – Skakanimation vid felklick -->
<script>
    const projectModal = document.getElementById("projectModal");
    const closeWrapper = projectModal.querySelector(".close-icon-wrapper");

    modalOverlay.addEventListener("click", (e) => {
        const clickedOutsideModal = !projectModal.contains(e.target);

        if (
            e.target === modalOverlay &&
            clickedOutsideModal &&
            !lastModalTrigger
        ) {
            closeWrapper.classList.remove("shake-animation");
            void closeWrapper.offsetWidth; // force reflow
            closeWrapper.classList.add("shake-animation");
        }
    });

    // 🧹 När animationen är klar – ta bort klassen
    closeWrapper.addEventListener("animationend", () => {
        closeWrapper.classList.remove("shake-animation");
    });
</script>
<!-- 6. Bildförhandsvisning i "Add Project" -->
<script>
    const fileInput = document.getElementById("projectImageInput");
    const previewImage = document.getElementById("uploadPreview");
    const uploadText = document.getElementById("uploadText");

    fileInput.addEventListener("change", function () {
        const file = this.files[0];
        if (file && file.type.startsWith("image/")) {
            const reader = new FileReader();
            reader.onload = function (e) {
                previewImage.src = e.target.result;
                uploadText.style.display = "none";
            };
            reader.readAsDataURL(file);
        }
    });

    closeButton.addEventListener("click", () => {
        modalOverlay.classList.remove("active");
        previewImage.src =
            "https://cdn.builder.io/api/v1/image/assets/2a274513ffcd4318aca721aa009fe223/71061189ef2425aef008f44a16c4de13605797de?placeholderIfAbsent=true";
        uploadText.style.display = "block";
        fileInput.value = "";
    });
    // 6b. Bildförhandsvisning i "Edit Project"
    const editFileInput = document.getElementById("editProjectImageInput");
    const editPreviewImage = document.getElementById("editUploadPreview");

    editFileInput.addEventListener("change", function () {
        const file = this.files[0];
        if (file && file.type.startsWith("image/")) {
            const reader = new FileReader();
            reader.onload = function (e) {
                editPreviewImage.src = e.target.result;
            };
            reader.readAsDataURL(file);
        }
    });
</script>
<script>
    const memberInput = document.getElementById("memberInput");
    const suggestionsList = document.getElementById("suggestionsList");
    const membersTagsContainer = document.getElementById("membersTagsContainer");
    const memberHiddenFieldsContainer = document.getElementById("memberHiddenFieldsContainer");

    const membersData = {};
    const allMembers = @Html.Raw(Json.Serialize(Model.AllMembers));

    allMembers.forEach(member => {
        if (member.role === "TeamMember") {
            membersData[member.id] = {
                name: member.userName,
                avatar: member.imageUrl ?? "https://placehold.co/24x24"
            };
        }
    });

    let currentSuggestions = [];
    let activeIndex = -1;
    let selectedMembers = [];

    function showSuggestions(query) {
        suggestionsList.innerHTML = "";

        const availableMembers = Object.keys(membersData).filter(
            (key) => !selectedMembers.includes(key)
        );

        const filtered = query.length < 1
            ? availableMembers.slice(0, 5)
            : availableMembers.filter((key) =>
                membersData[key].name.toLowerCase().includes(query.toLowerCase())
            );

        if (filtered.length === 0) {
            suggestionsList.style.display = "none";
            return;
        }

        currentSuggestions = filtered;
        suggestionsList.style.display = "block";

        filtered.forEach((key, index) => {
            const li = document.createElement("li");
            li.textContent = membersData[key].name;

            if (index === activeIndex) {
                li.classList.add("active");
            }

            li.addEventListener("click", (e) => {
                e.stopPropagation();
                addMember(key);
            });

            suggestionsList.appendChild(li);
        });
    }

    function addMember(memberKey) {
        const member = membersData[memberKey];
        if (!member || selectedMembers.includes(memberKey)) return;

        // Visa som tag
        const tag = document.createElement("div");
        tag.className = "member-tag";
        tag.dataset.id = memberKey;
        tag.innerHTML = `
                <img src="${member.avatar}" alt="${member.name}" class="project-member-avatar" />
                <span class="member-name">${member.name}</span>
                <img src="https://cdn.builder.io/api/v1/image/assets/2a274513ffcd4318aca721aa009fe223/dfff3394c6759651f9dc2423c2fe281189809b34?placeholderIfAbsent=true" alt="Remove" class="remove-icon" />
            `;

        tag.querySelector(".remove-icon").addEventListener("click", () => {
            tag.remove();
            selectedMembers = selectedMembers.filter(id => id !== memberKey);
            memberHiddenFieldsContainer.querySelectorAll(`[data-id="${memberKey}"]`).forEach(el => el.remove());
        });

        membersTagsContainer.appendChild(tag);
        selectedMembers.push(memberKey);

        // Lägg till enbart ID som hidden input
        const index = selectedMembers.length - 1;
        const input = document.createElement("input");
        input.type = "hidden";
        input.name = `MemberIds`; // 👈 matchar CreateProjectViewModel
        input.value = memberKey;
        input.dataset.id = memberKey;
        memberHiddenFieldsContainer.appendChild(input);

        // Nollställ inputfält
        memberInput.value = "";
        suggestionsList.innerHTML = "";
        activeIndex = -1;
        suggestionsList.style.display = "none";
    }

    memberInput.addEventListener("input", (e) => {
        const query = e.target.value.trim();
        showSuggestions(query);
    });

    memberInput.addEventListener("keydown", (e) => {
        const suggestions = suggestionsList.querySelectorAll("li");

        if (e.key === "Enter" && activeIndex >= 0) {
         
            addMember(currentSuggestions[activeIndex]);
        } else if (e.key === "ArrowDown" && activeIndex < suggestions.length - 1) {
            if (activeIndex >= 0) suggestions[activeIndex].classList.remove("active");
            activeIndex++;
            suggestions[activeIndex].classList.add("active");
        } else if (e.key === "ArrowUp" && activeIndex > 0) {
            suggestions[activeIndex].classList.remove("active");
            activeIndex--;
            suggestions[activeIndex].classList.add("active");
        }
    });

    document.addEventListener("click", (e) => {
        if (!memberInput.contains(e.target) && !suggestionsList.contains(e.target)) {
            suggestionsList.style.display = "none";
        }
    });

    memberInput.addEventListener("focus", () => {
        const query = memberInput.value.trim();
        showSuggestions(query);
    });
</script>



<!-- 8. Customer Email-autocomplete -->
<script>
    const clientInput = document.getElementById("clientInput");
    const clientSuggestionsList = document.getElementById("clientSuggestionsList");

    const allMembersForCustomer = @Html.Raw(Json.Serialize(Model.AllMembers));
    const customerData = {};

    allMembersForCustomer.forEach(member => {
        if (member.role?.toLowerCase() === "customer") {
            customerData[member.email] = {
                email: member.email,
                avatar: member.imageUrl ?? "https://placehold.co/24x24"
            };
        }
    });

    let customerSuggestions = [];
    let customerActiveIndex = -1;

    function showCustomerSuggestions(query) {
        clientSuggestionsList.innerHTML = "";

        const available = Object.keys(customerData);

        const filtered = query.length < 1
            ? available.slice(0, 5)
            : available.filter(key =>
                customerData[key].email.toLowerCase().includes(query.toLowerCase())
            );

        if (filtered.length === 0) {
            clientSuggestionsList.style.display = "none";
            return;
        }

        customerSuggestions = filtered;
        clientSuggestionsList.style.display = "block";

        filtered.forEach((key, index) => {
            const li = document.createElement("li");
            li.textContent = customerData[key].email;

            if (index === customerActiveIndex) {
                li.classList.add("active");
            }

            li.addEventListener("click", (e) => {
                e.stopPropagation();
                clientInput.value = customerData[key].email;
                clientSuggestionsList.innerHTML = "";
                clientSuggestionsList.style.display = "none";
                customerActiveIndex = -1;
            });

            clientSuggestionsList.appendChild(li);
        });
    }

    clientInput.addEventListener("input", (e) => {
        const query = e.target.value.trim();
        showCustomerSuggestions(query);
    });

    clientInput.addEventListener("keydown", (e) => {
        const suggestions = clientSuggestionsList.querySelectorAll("li");

        if (e.key === "Enter" && customerActiveIndex >= 0) {
         
            const key = customerSuggestions[customerActiveIndex];
            clientInput.value = customerData[key].email;
            clientSuggestionsList.innerHTML = "";
            clientSuggestionsList.style.display = "none";
            customerActiveIndex = -1;
        } else if (e.key === "ArrowDown") {
            if (customerActiveIndex >= 0 && customerActiveIndex < suggestions.length) {
                suggestions[customerActiveIndex].classList.remove("active");
            }
            customerActiveIndex = Math.min(customerActiveIndex + 1, suggestions.length - 1);
            suggestions[customerActiveIndex]?.classList.add("active");
        } else if (e.key === "ArrowUp") {
            if (customerActiveIndex >= 0 && customerActiveIndex < suggestions.length) {
                suggestions[customerActiveIndex].classList.remove("active");
            }
            customerActiveIndex = Math.max(customerActiveIndex - 1, 0);
            suggestions[customerActiveIndex]?.classList.add("active");
        }
    });

    document.addEventListener("click", (e) => {
        if (!clientInput.contains(e.target) && !clientSuggestionsList.contains(e.target)) {
            clientSuggestionsList.style.display = "none";
        }
    });

    clientInput.addEventListener("focus", () => {
        const query = clientInput.value.trim();
        showCustomerSuggestions(query);
    });
</script>
<script>
    const editMemberInput = document.getElementById("editMemberInput");
    const editSuggestionsList = document.getElementById("editSuggestionsList");
    const editMembersTagsContainer = document.getElementById("editMembersTagsContainer");
    const editMemberHiddenFieldsContainer = document.getElementById("editMemberHiddenFieldsContainer");

    const membersDataEdit = {}; // återanvänd från allMembers
    allMembers.forEach(member => {
        if (member.role === "TeamMember") {
            membersDataEdit[member.id] = {
                name: member.userName,
                avatar: member.imageUrl ?? "https://placehold.co/24x24"
            };
        }
    });

    let selectedEditMembers = [];
    let currentEditSuggestions = [];
    let activeEditIndex = -1;

    function showEditSuggestions(query) {
        editSuggestionsList.innerHTML = "";

        const availableMembers = Object.keys(membersDataEdit).filter(
            (key) => !selectedEditMembers.includes(key)
        );

        const filtered = query.length < 1
            ? availableMembers.slice(0, 5)
            : availableMembers.filter((key) =>
                membersDataEdit[key].name.toLowerCase().includes(query.toLowerCase())
            );

        if (filtered.length === 0) {
            editSuggestionsList.style.display = "none";
            return;
        }

        currentEditSuggestions = filtered;
        editSuggestionsList.style.display = "block";

        filtered.forEach((key, index) => {
            const li = document.createElement("li");
            li.textContent = membersDataEdit[key].name;

            if (index === activeEditIndex) li.classList.add("active");

            li.addEventListener("click", (e) => {
                e.stopPropagation();
                addEditMember(key);
            });

            editSuggestionsList.appendChild(li);
        });
    }

    function addEditMember(memberKey) {
        const member = membersDataEdit[memberKey];
        if (!member || selectedEditMembers.includes(memberKey)) return;

        // Visa som tag
        const tag = document.createElement("div");
        tag.className = "member-tag";
        tag.dataset.id = memberKey;
        tag.innerHTML = `
                <img src="${member.avatar}" alt="${member.name}" class="project-member-avatar" />
                <span class="member-name">${member.name}</span>
                <img src="https://cdn.builder.io/api/v1/image/assets/2a274513ffcd4318aca721aa009fe223/dfff3394c6759651f9dc2423c2fe281189809b34?placeholderIfAbsent=true" alt="Remove" class="remove-icon" />
            `;

        tag.querySelector(".remove-icon").addEventListener("click", () => {
            tag.remove();
            selectedEditMembers = selectedEditMembers.filter(id => id !== memberKey);
            editMemberHiddenFieldsContainer.querySelectorAll(`[data-id="${memberKey}"]`).forEach(el => el.remove());
        });

        editMembersTagsContainer.appendChild(tag);
        selectedEditMembers.push(memberKey);

        // Hidden input
        const input = document.createElement("input");
        input.type = "hidden";
        input.name = "MemberIds";
        input.value = memberKey;
        input.dataset.id = memberKey;
        editMemberHiddenFieldsContainer.appendChild(input);

        editMemberInput.value = "";
        editSuggestionsList.innerHTML = "";
        activeEditIndex = -1;
        editSuggestionsList.style.display = "none";
    }

    editMemberInput?.addEventListener("input", (e) => {
        const query = e.target.value.trim();
        showEditSuggestions(query);
    });

    editMemberInput?.addEventListener("keydown", (e) => {
        const suggestions = editSuggestionsList.querySelectorAll("li");

        if (e.key === "Enter" && activeEditIndex >= 0) {
            e.preventDefault();
            addEditMember(currentEditSuggestions[activeEditIndex]);
        } else if (e.key === "ArrowDown" && activeEditIndex < suggestions.length - 1) {
            if (activeEditIndex >= 0) suggestions[activeEditIndex].classList.remove("active");
            activeEditIndex++;
            suggestions[activeEditIndex].classList.add("active");
        } else if (e.key === "ArrowUp" && activeEditIndex > 0) {
            suggestions[activeEditIndex].classList.remove("active");
            activeEditIndex--;
            suggestions[activeEditIndex].classList.add("active");
        }
    });

    document.addEventListener("click", (e) => {
        if (!editMemberInput?.contains(e.target) && !editSuggestionsList?.contains(e.target)) {
            editSuggestionsList.style.display = "none";
        }
    });

    editMemberInput?.addEventListener("focus", () => {
        const query = editMemberInput.value.trim();
        showEditSuggestions(query);
    });
</script>
