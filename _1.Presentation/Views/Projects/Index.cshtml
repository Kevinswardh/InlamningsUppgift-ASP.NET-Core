@model _1.PresentationLayer.ViewModels.ProjectsViewModels.ProjectsViewModel

@{
    ViewData["Title"] = "Project page";
    Layout = "~/Views/Shared/_AppLayout.cshtml";
}

<section class="content-section">
    <div class="section-header">
        <h2 class="section-title">Projects</h2>
        <button class="add-button">
            <i class="ti ti-plus"></i>
            <span>Add Project</span>
        </button>
    </div>

    <partial name="~/Views/_Partials/ProjectListPartials/_ProjectTabList.cshtml" model="Model" />

    <div class="project-grid">
        @foreach (var project in Model.Projects)
        {
            <partial name="~/Views/_Partials/ProjectListPartials/_ProjectCard.cshtml" model="project" />
        }
    </div>
</section>

<!-- ADD PROJECT MODAL -->
<div class="modal-overlay" id="modalOverlay">
    <div class="modal" id="projectModal">
        <header class="form-header">
            <h1 class="form-title">Add Project</h1>
            <div class="close-icon-wrapper">
                <img src="https://cdn.builder.io/api/v1/image/assets/2a274513ffcd4318aca721aa009fe223/fbad265fe11d048cf327a34d15de60a4a8ffd228?placeholderIfAbsent=true"
                     alt="Close"
                     class="close-icon" />
            </div>
        </header>
        <form class="project-form">
            <section class="image-upload-section" id="imageUploadSection">
                <label class="upload-border" for="projectImageInput">
                    <img src="https://cdn.builder.io/api/v1/image/assets/2a274513ffcd4318aca721aa009fe223/71061189ef2425aef008f44a16c4de13605797de?placeholderIfAbsent=true"
                         alt="Upload"
                         class="upload-icon"
                         id="uploadPreview" />
                    <span class="upload-text" id="uploadText">Click to upload icon</span>
                </label>
                <input type="file"
                       id="projectImageInput"
                       accept="image/*"
                       hidden />
            </section>

            <div class="form-group">
                <label class="form-label">Project Name</label>
                <input type="text"
                       class="form-input"
                       placeholder="Project Name" />
            </div>

            <div class="form-group">
                <label class="form-label">Client Name</label>
                <input type="text"
                       class="form-input"
                       placeholder="Client Name" />
            </div>

            <!-- Quill -->
            <div class="form-group">
                <label class="form-label">Description</label>
                <div id="editor-container">
                    <p><br /></p>
                </div>
                <input type="hidden"
                       name="description"
                       id="hidden-description" />
            </div>

            <div class="date-container">
                <div class="form-group">
                    <label class="form-label">Start Date</label>
                    <div class="date-wrapper">
                        <input type="date" class="form-input custom-date" />
                        <img src="@Url.Content("~/Pictures/Icons/Calendar.svg")"
                             alt="Calendar"
                             class="calendar-icon-clickable" />
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">End Date</label>
                    <div class="date-wrapper">
                        <input type="date" class="form-input custom-date" />
                        <img src="@Url.Content("~/Pictures/Icons/Calendar.svg")"
                             alt="Calendar"
                             class="calendar-icon-clickable" />
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label class="form-label">Members</label>
                <div class="members-input">
                    <div class="members-tags" id="membersTagsContainer">
                        <!-- Dynamiskt tillagda taggar kommer här -->
                    </div>
                    <input type="text"
                           id="memberInput"
                           class="member-input"
                           placeholder="Add member..." />
                    <ul id="suggestionsList" class="suggestions-list">
                        <!-- Filtrerade resultat kommer här -->
                    </ul>
                </div>
            </div>

            <div class="form-group">
                <label class="form-label">Budget</label>
                <div class="budget-input">
                    <img src="https://cdn.builder.io/api/v1/image/assets/2a274513ffcd4318aca721aa009fe223/4dcedbc0cf0e776a433556885c24281aa83f0ee1?placeholderIfAbsent=true"
                         alt="Currency"
                         class="currency-icon" />
                    <input type="text" placeholder="0" class="budget-field" />
                </div>
            </div>

            <button type="submit" class="submit-button">Create</button>
        </form>
    </div>
</div>
<!-- EDIT PROJECT MODAL -->
<div class="modal-overlay" id="modalOverlay">
    <div class="modal" id="editProjectModal">
        <header class="form-header">
            <h1 class="form-title">Add Project</h1>
            <div class="close-icon-wrapper">
                <img src="https://cdn.builder.io/api/v1/image/assets/2a274513ffcd4318aca721aa009fe223/fbad265fe11d048cf327a34d15de60a4a8ffd228?placeholderIfAbsent=true"
                     alt="Close"
                     class="close-icon" />
            </div>
        </header>
        <form class="project-form">
            <section class="image-upload-section" id="imageUploadSection">
                <label class="upload-border" for="projectImageInput">
                    <img src="https://cdn.builder.io/api/v1/image/assets/2a274513ffcd4318aca721aa009fe223/71061189ef2425aef008f44a16c4de13605797de?placeholderIfAbsent=true"
                         alt="Upload"
                         class="upload-icon"
                         id="uploadPreview" />
                    <span class="upload-text" id="uploadText">Click to upload icon</span>
                </label>
                <input type="file"
                       id="projectImageInput"
                       accept="image/*"
                       hidden />
            </section>

            <div class="form-group">
                <label class="form-label">Project Name</label>
                <input type="text"
                       class="form-input"
                       placeholder="Project Name" />
            </div>

            <div class="form-group">
                <label class="form-label">Client Name</label>
                <input type="text"
                       class="form-input"
                       placeholder="Client Name" />
            </div>

            <!-- Quill -->
            <div class="form-group">
                <label class="form-label">Description</label>
                <div id="editor-container">
                    <p><br /></p>
                </div>
                <input type="hidden"
                       name="description"
                       id="hidden-description" />
            </div>

            <div class="date-container">
                <div class="form-group">
                    <label class="form-label">Start Date</label>
                    <div class="date-wrapper">
                        <input type="date" class="form-input custom-date" />
                        <img src="icons/calendar.svg"
                             alt="Calendar"
                             class="calendar-icon-clickable" />
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">End Date</label>
                    <div class="date-wrapper">
                        <input type="date" class="form-input custom-date" />
                        <img src="icons/calendar.svg"
                             alt="Calendar"
                             class="calendar-icon-clickable" />
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label class="form-label">Members</label>
                <div class="members-input">
                    <div class="members-tags" id="membersTagsContainer">
                        <!-- Dynamiskt tillagda taggar kommer här -->
                    </div>
                    <input type="text"
                           id="memberInput"
                           class="member-input"
                           placeholder="Add member..." />
                    <ul id="suggestionsList" class="suggestions-list">
                        <!-- Filtrerade resultat kommer här -->
                    </ul>
                </div>
            </div>

            <div class="form-group">
                <label class="form-label">Budget</label>
                <div class="budget-input">
                    <img src="https://cdn.builder.io/api/v1/image/assets/2a274513ffcd4318aca721aa009fe223/4dcedbc0cf0e776a433556885c24281aa83f0ee1?placeholderIfAbsent=true"
                         alt="Currency"
                         class="currency-icon" />
                    <input type="text" placeholder="0" class="budget-field" />
                </div>
            </div>

            <button type="submit" class="submit-button">Create</button>
        </form>
    </div>
</div>
<!-- Script 1: Modalhantering -->
<script>
    const addButton = document.querySelector(".add-button");
    const modalOverlay = document.getElementById("modalOverlay");
    const modal = document.getElementById("projectModal");
    const closeButton = modalOverlay.querySelector(".close-icon");
    const modalTitle = modal.querySelector(".form-title");
    const submitButton = modal.querySelector(".submit-button");

    let lastModalTrigger = null;

    function safelySetTrigger(type) {
        lastModalTrigger = type;
        setTimeout(() => {
            lastModalTrigger = null;
        }, 300);
    }

    function resetModal() {
        modal.querySelectorAll(".form-group").forEach((group) => {
            group.style.display = "block";
        });

        const imageField = document.getElementById("imageUploadSection");
        if (imageField) imageField.style.display = "flex";

        const oldMessage = modal.querySelector("#delete-confirm-message");
        if (oldMessage) oldMessage.remove();

        submitButton.classList.remove("danger-button");

        const memberLabel = modal.querySelector("label.form-label");
        if (memberLabel) memberLabel.style.display = "block";

        // Ta bort alla member-tags
        modal.querySelectorAll(".member-tag").forEach((tag) => tag.remove());

        // Töm alla inputfält
        modal.querySelectorAll("input").forEach((input) => {
            input.value = "";
        });

        // TÖM WYSIWYG
        const editor = modal.querySelector(".ql-editor");
        if (editor) {
            editor.innerHTML = "<p><br></p>"; // Tom paragraf med radbrytning (Quill default)
            editor.classList.add("ql-blank"); // Lägger till klassen så att placeholder visas
        }
    }

    function showAllFields() {
        modal.querySelectorAll(".form-group").forEach((group) => {
            group.style.display = "block";
        });

        const imageField = modal.querySelector(".project-image-field");
        if (imageField) imageField.style.display = "block";

        submitButton.classList.remove("danger-button");
    }

    function showOnlyMemberField() {
        modal.querySelectorAll(".form-group").forEach((group) => {
            const hasMemberInput = group.querySelector("#memberInput");
            group.style.display = hasMemberInput ? "block" : "none";
        });

        const imageField = document.getElementById("imageUploadSection");
        if (imageField) imageField.style.display = "none";

        const memberLabel = modal.querySelector("label.form-label");
        if (memberLabel && memberLabel.textContent.trim() === "Members") {
            memberLabel.style.display = "none";
        }

        submitButton.classList.remove("danger-button");
    }

    function showDeleteConfirmation() {
        modal.querySelectorAll(".form-group").forEach((group) => {
            group.style.display = "none";
        });

        const imageField = document.getElementById("imageUploadSection");
        if (imageField) imageField.style.display = "none";

        const confirmMessage = document.createElement("label");
        confirmMessage.id = "delete-confirm-message";
        confirmMessage.className = "form-label";
        confirmMessage.style.margin = "1rem";
        confirmMessage.style.display = "block";
        confirmMessage.textContent =
            "Are you sure you want to delete this project?";
        modal.querySelector("form").insertBefore(confirmMessage, submitButton);

        submitButton.classList.add("danger-button");
    }

    function resetMemberInput() {
        const memberInput = document.getElementById("memberInput");
        const membersTagsContainer = document.getElementById(
            "membersTagsContainer"
        );
        const suggestionsList = document.getElementById("suggestionsList");

        if (memberInput) memberInput.value = "";
        if (membersTagsContainer) membersTagsContainer.innerHTML = "";
        if (suggestionsList) suggestionsList.innerHTML = "";
    }

    // ➕ ADD PROJECT
    addButton.addEventListener("click", () => {
        closeMenusExcept();
        resetModal();
        modal.dataset.mode = "create";
        modalTitle.textContent = "Add Project";
        submitButton.textContent = "Create";
        modalOverlay.classList.add("active");
        showAllFields();
        safelySetTrigger("add");
        modal.scrollTop = 0;
    });

    // ✏️ EDIT PROJECT
    document.querySelectorAll(".menu-item-edit").forEach((editBtn) => {
        editBtn.addEventListener("click", (e) => {
            e.stopPropagation();
            window.suppressDropdownClose = true;
            closeMenusExcept();
            resetModal();
            modal.dataset.mode = "edit";
            modalTitle.textContent = "Edit Project";
            submitButton.textContent = "Save changes";
            modalOverlay.classList.add("active");
            showAllFields();
            safelySetTrigger("edit");
            modal.scrollTop = 0;
        });
    });

    // 👥 ADD MEMBER
    document.querySelectorAll(".menu-item").forEach((btn) => {
        const label = btn.querySelector(".menu-text");
        if (label && label.textContent.trim() === "Add Member") {
            btn.addEventListener("click", (e) => {
                e.stopPropagation();
                window.suppressDropdownClose = true;
                closeMenusExcept();
                resetModal();
                modal.dataset.mode = "add-member";
                modalTitle.textContent = "Add Member";
                submitButton.textContent = "Save";
                modalOverlay.classList.add("active");
                showOnlyMemberField();
                resetMemberInput();
                safelySetTrigger("add-member");
                modal.scrollTop = 0;
            });
        }
    });

    // 🗑️ DELETE PROJECT
    document.querySelectorAll(".menu-item-delete").forEach((btn) => {
        btn.addEventListener("mousedown", (e) => {
            e.stopPropagation();
            window.suppressDropdownClose = true;

            resetModal();
            modal.dataset.mode = "delete";
            modalTitle.textContent = "Delete Project";
            submitButton.textContent = "Delete";

            modalOverlay.classList.add("active");
            showDeleteConfirmation();

            closeMenusExcept(); // 👈 kör sist – efter att allt är synligt
            safelySetTrigger("delete");
        });
    });

    // ❌ STÄNG MODAL
    closeButton.addEventListener("click", () => {
        modalOverlay.classList.remove("active");
        const confirmMessage = modal.querySelector("#delete-confirm-message");
        resetModal();
        if (confirmMessage) confirmMessage.style.display = "none";
    });
</script>
<!-- 2. Quill Editor + Cursor Fix -->
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<script>
    const quill = new Quill("#editor-container", {
        theme: "snow",
        placeholder: "Type something...",
        modules: {
            toolbar: [
                [{ header: [1, 2, false] }],
                ["bold", "italic", "underline"],
                ["blockquote", "code-block"],
                [{ list: "ordered" }, { list: "bullet" }],
                ["clean"],
            ],
        },
    });

    let savedRange = null;
    quill.on("selection-change", function (range) {
        if (range) {
            savedRange = range;
        }
    });

    document
        .querySelector(".ql-toolbar")
        .addEventListener("mousedown", function () {
            if (savedRange) {
                setTimeout(() => {
                    quill.setSelection(savedRange.index, savedRange.length);
                }, 0);
            }
        });
</script>

<!-- 3. Header-menyer: Profil, Inställningar & Notifications -->
<script>
    const profileToggle = document.getElementById("profileToggle");
    const profileMenu = document.getElementById("profileMenu");
    const settingsToggle = document.getElementById("settingsToggle");
    const settingsMenu = document.getElementById("settingsMenu");
    const notificationsToggle = document.getElementById(
        "notificationsToggle"
    );
    const notificationsCard = document.getElementById("notificationsCard");

    // 🔁 För att också stänga projektdropdowns
    const allDropdowns = document.querySelectorAll(".dropdown-menu");

    function closeMenusExcept(exception) {
        if (exception !== "profile") profileMenu.hidden = true;
        if (exception !== "settings") settingsMenu.hidden = true;
        if (exception !== "dropdown") {
            allDropdowns.forEach((dropdown) => {
                dropdown.style.display = "none";
            });
        }
        if (exception !== "notifications" && notificationsCard) {
            notificationsCard.hidden = true;
        }
    }

    profileToggle.addEventListener("click", (e) => {
        e.stopPropagation();
        const isHidden = profileMenu.hidden;
        closeMenusExcept("profile");
        profileMenu.hidden = !isHidden;
    });

    settingsToggle.addEventListener("click", (e) => {
        e.stopPropagation();
        const isHidden = settingsMenu.hidden;
        closeMenusExcept("settings");
        settingsMenu.hidden = !isHidden;
    });

    notificationsToggle?.addEventListener("click", (e) => {
        e.stopPropagation();
        const isHidden = notificationsCard.hidden;
        closeMenusExcept("notifications");
        notificationsCard.hidden = !isHidden;
    });

    document.addEventListener("click", (e) => {
        if (
            !profileMenu.contains(e.target) &&
            !profileToggle.contains(e.target) &&
            !settingsMenu.contains(e.target) &&
            !settingsToggle.contains(e.target) &&
            (!notificationsCard || !notificationsCard.contains(e.target)) &&
            (!notificationsToggle || !notificationsToggle.contains(e.target))
        ) {
            closeMenusExcept(); // Stänger alla
        }
    });
</script>

<!-- 5. Modal Bakgrund – Skakanimation vid felklick -->
<script>
    const projectModal = document.getElementById("projectModal");
    const closeWrapper = projectModal.querySelector(".close-icon-wrapper");

    modalOverlay.addEventListener("click", (e) => {
        const clickedOutsideModal = !projectModal.contains(e.target);

        if (
            e.target === modalOverlay &&
            clickedOutsideModal &&
            !lastModalTrigger
        ) {
            closeWrapper.classList.remove("shake-animation");
            void closeWrapper.offsetWidth; // force reflow
            closeWrapper.classList.add("shake-animation");
        }
    });

    // 🧹 När animationen är klar – ta bort klassen
    closeWrapper.addEventListener("animationend", () => {
        closeWrapper.classList.remove("shake-animation");
    });
</script>
<!-- 6. Bildförhandsvisning i "Add Project" -->
<script>
    const fileInput = document.getElementById("projectImageInput");
    const previewImage = document.getElementById("uploadPreview");
    const uploadText = document.getElementById("uploadText");

    fileInput.addEventListener("change", function () {
        const file = this.files[0];
        if (file && file.type.startsWith("image/")) {
            const reader = new FileReader();
            reader.onload = function (e) {
                previewImage.src = e.target.result;
                uploadText.style.display = "none";
            };
            reader.readAsDataURL(file);
        }
    });

    closeButton.addEventListener("click", () => {
        modalOverlay.classList.remove("active");
        previewImage.src =
            "https://cdn.builder.io/api/v1/image/assets/2a274513ffcd4318aca721aa009fe223/71061189ef2425aef008f44a16c4de13605797de?placeholderIfAbsent=true";
        uploadText.style.display = "block";
        fileInput.value = "";
    });
</script>
<!-- 7. Medlemssök och taggning -->
<script>
    const memberInput = document.getElementById("memberInput");
    const suggestionsList = document.getElementById("suggestionsList");
    const membersTagsContainer = document.getElementById(
        "membersTagsContainer"
    );

    const membersData = {
        therese: {
            name: "Therése Lidbom",
            avatar:
                "https://cdn.builder.io/api/v1/image/assets/2a274513ffcd4318aca721aa009fe223/062c8d2c544a1cfec394b494618868cbe3eae88b?placeholderIfAbsent=true",
        },
        hans: {
            name: "Hans Mattin-Lassei",
            avatar:
                "https://cdn.builder.io/api/v1/image/assets/2a274513ffcd4318aca721aa009fe223/421b658bc5ea3245d4f35d0f675af7b328b8c40e?placeholderIfAbsent=true",
        },
        emma: {
            name: "Emma Sjöström",
            avatar:
                "https://cdn.builder.io/api/v1/image/assets/TEMP/50c7e1d92d04682beceaa22a8ea7709a6dc0a782?placeholderIfAbsent=true",
        },
        john: {
            name: "John Doe",
            avatar:
                "https://cdn.builder.io/api/v1/image/assets/2a274513ffcd4318aca721aa009fe223/062c8d2c544a1cfec394b494618868cbe3eae88b?placeholderIfAbsent=true",
        },
        lisa: {
            name: "Lisa Lind",
            avatar:
                "https://cdn.builder.io/api/v1/image/assets/2a274513ffcd4318aca721aa009fe223/421b658bc5ea3245d4f35d0f675af7b328b8c40e?placeholderIfAbsent=true",
        },
        david: {
            name: "David Henriksson",
            avatar:
                "https://cdn.builder.io/api/v1/image/assets/TEMP/50c7e1d92d04682beceaa22a8ea7709a6dc0a782?placeholderIfAbsent=true",
        },
    };

    let currentSuggestions = [];
    let activeIndex = -1;
    let selectedMembers = [];

    function showSuggestions(query) {
        suggestionsList.innerHTML = "";
        const availableMembers = Object.keys(membersData).filter(
            (key) => !selectedMembers.includes(key)
        );
        let suggestions = [];

        if (query.length < 1) {
            suggestions = availableMembers.slice(0, 5);
        } else {
            suggestions = availableMembers.filter((key) =>
                membersData[key].name.toLowerCase().includes(query.toLowerCase())
            );
        }

        if (suggestions.length === 0) {
            suggestionsList.style.display = "none";
            return;
        }

        currentSuggestions = suggestions;
        suggestionsList.style.display = "block";

        suggestions.forEach((key, index) => {
            const suggestionItem = document.createElement("li");
            suggestionItem.textContent = membersData[key].name;

            if (activeIndex === index) {
                suggestionItem.classList.add("active");
            }

            // ✅ FIX: Stoppa eventet från att bubbla upp till modal-overlay
            suggestionItem.addEventListener("click", (e) => {
                e.stopPropagation();
                addMember(key);
            });

            suggestionsList.appendChild(suggestionItem);
        });
    }

    function addMember(memberKey) {
        const member = membersData[memberKey];
        const existingTag = membersTagsContainer.querySelector(
            `[data-id="${memberKey}"]`
        );
        if (existingTag) return;

        const tag = document.createElement("div");
        tag.className = "member-tag";
        tag.dataset.id = memberKey;
        tag.innerHTML = `
          <img src="${member.avatar}" alt="${member.name}" class="project-member-avatar" />
          <span class="member-name">${member.name}</span>
          <img src="https://cdn.builder.io/api/v1/image/assets/2a274513ffcd4318aca721aa009fe223/dfff3394c6759651f9dc2423c2fe281189809b34?placeholderIfAbsent=true" alt="Remove" class="remove-icon" />
        `;

        tag
            .querySelector(".remove-icon")
            .addEventListener("click", () => tag.remove());

        membersTagsContainer.appendChild(tag);
        selectedMembers.push(memberKey);
        memberInput.value = "";
        suggestionsList.innerHTML = "";
        activeIndex = -1;
        suggestionsList.style.display = "none";
    }

    memberInput.addEventListener("input", (e) => {
        const query = e.target.value.trim();
        showSuggestions(query);
    });

    memberInput.addEventListener("keydown", (e) => {
        const suggestions = suggestionsList.querySelectorAll("li");

        if (e.key === "Enter" && activeIndex >= 0) {
            e.preventDefault();
            addMember(currentSuggestions[activeIndex]);
        } else if (
            e.key === "ArrowDown" &&
            activeIndex < suggestions.length - 1
        ) {
            if (activeIndex >= 0) {
                suggestions[activeIndex].classList.remove("active");
            }
            activeIndex++;
            suggestions[activeIndex].classList.add("active");
        } else if (e.key === "ArrowUp" && activeIndex > 0) {
            suggestions[activeIndex].classList.remove("active");
            activeIndex--;
            suggestions[activeIndex].classList.add("active");
        }
    });

    document.addEventListener("click", (e) => {
        if (
            !memberInput.contains(e.target) &&
            !suggestionsList.contains(e.target)
        ) {
            suggestionsList.style.display = "none";
        }
    });

    memberInput.addEventListener("focus", () => {
        const query = memberInput.value.trim();
        showSuggestions(query);
    });
</script>

