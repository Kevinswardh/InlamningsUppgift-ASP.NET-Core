@{
    var currentController = ViewContext.RouteData.Values["controller"]?.ToString();
    var isUser = User?.Identity?.IsAuthenticated == true && User.IsInRole("User");
    var isManager = User?.Identity?.IsAuthenticated == true && User.IsInRole("Manager");
    var isTeamMember = User?.Identity?.IsAuthenticated == true && User.IsInRole("TeamMember");
    var isCustomer = User?.Identity?.IsAuthenticated == true && User.IsInRole("Customer");
    var isAdmin = User?.Identity?.IsAuthenticated == true && User.IsInRole("Admin");


    var canSeeProjects = isTeamMember || isCustomer || isManager || isAdmin;
    var canSeeCustomers = isTeamMember || isManager || isAdmin;
    var canSeeTeamMembers = isTeamMember || isCustomer || isManager || isAdmin;
    var canSeeManagers = true;
    var canSeeNewMembers = isManager || isAdmin;
}
@using System.Security.Claims


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@700&family=Nunito:wght@400;600;700&display=swap"
          rel="stylesheet" />
    @{
        bool isDark = false;

        if (User.Identity != null && User.Identity.IsAuthenticated)
        {
            var claim = ((ClaimsIdentity)User.Identity).FindFirst("darkMode");
            isDark = string.Equals(claim?.Value, "true", StringComparison.OrdinalIgnoreCase);
        }

        ViewBag.IsDark = isDark; // 🟢 Sätt alltid ViewBag.IsDark
    }

    <!-- Grundstilar: alltid -->
    <link rel="stylesheet" href="~/css/site.css" />

    <!-- Dark mode: bara om aktivt -->
    @if (ViewBag.IsDark == true)
    {
        <link rel="stylesheet" href="~/css/site-dark.css" />
    }


    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/@@tabler/icons-webfont@latest/tabler-icons.min.css" />
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css"
          rel="stylesheet" />

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js" integrity="sha512-CJZhmElKX8zJ1Z8Ipy3SdyT+FJZhMdu7AB3x0xMyGVrKi7M3qZQBGhWlMFCR+vNTVwEcLkE8TyzHi3oAVAbKHw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    @RenderSection("Styles", required: false)
</head>
<body>

    <!-- HTML body content continues after this -->
    <div class="dashboard">
        <nav class="sidebar">
            <div class="sidebar-header">
                <img src="@Url.Content("~/Pictures/Icons/Logo.svg")" alt="Logo" class="logo" />
                <span class="logo-text">alpha</span>
            </div>

            @if (canSeeProjects)
            {
                <a asp-controller="Projects" asp-action="Index" class="nav-item @(currentController == "Projects" ? "active" : "")">
                    <i class="ti ti-folder"></i>
                    <span>Projects</span>
                </a>
            }

            @if (canSeeManagers)
            {
                <a asp-controller="Managers" asp-action="Index" class="nav-item @(currentController == "Managers" ? "active" : "")">
                    <i class="ti ti-user"></i>
                    <span>Managers</span>
                </a>
            }

            @if (canSeeTeamMembers)
            {
                <a asp-controller="Teammembers" asp-action="Index" class="nav-item @(currentController == "Teammembers" ? "active" : "")">
                    <i class="ti ti-users"></i>
                    <span>Team members</span>
                </a>
            }

            @if (canSeeCustomers)
            {
                <a asp-controller="Customers" asp-action="Index" class="nav-item @(currentController == "Customers" ? "active" : "")">
                    <i class="ti ti-address-book"></i>
                    <span>Customers</span>
                </a>
            }

            @if (canSeeNewMembers)
            {
                <a asp-controller="NewMembers" asp-action="Index" class="nav-item @(currentController == "NewMembers" ? "active" : "")">
                    <i class="ti ti-address-book"></i>
                    <span>New member</span>
                </a>
            }
        </nav>

        <main class="main-content">
            <header class="top-bar">
                <div class="search-container">
                    <i class="ti ti-search"></i>
                    <input type="text"
                           placeholder="Search anything..."
                           class="search-input" />
                </div>
                <div class="user-controls">
                    <!-- Klockikonen -->
                    <button class="icon-button" id="notificationsToggle" style="position: relative;">
                        <i class="ti ti-bell"></i>
                        <span id="notificationCount"
                              style="position: absolute; top: -5px; right: -5px; background-color: red; color: white;
                 font-size: 0.75rem; padding: 2px 6px; border-radius: 50%; display: inline-block;"
                              hidden>
                            0
                        </span>
                    </button>



                    @await Component.InvokeAsync("NotificationCard")


                    <button class="icon-button">
                        <i class="ti ti-settings" id="settingsToggle"></i>
                    </button>
                    <article class="settings-menu" id="settingsMenu" hidden>
                        <header class="settings-header">
                            <div class="settings-icon-container">
                                <i class="ti ti-settings settings-icon-large"></i>
                            </div>
                            <h2 class="settings-title">Inställningar</h2>
                        </header>

                        <hr class="menu-divider" />

                        <nav class="menu-options">
                            <form asp-controller="Settings" asp-action="ToggleDarkMode" method="post" class="darkmode-form">
                                <button type="submit" name="enable" value="@(ViewBag.IsDark ? "false" : "true")" class="menu-item settings-item" style="width: 100%;">
                                    <i class="ti ti-moon"></i>
                                    <span class="menu-text" style="margin-left: 8px;">
                                        @(ViewBag.IsDark ? "Light Mode" : "Dark Mode")
                                    </span>
                                </button>
                            </form>

                            <button type="button" class="menu-item settings-item" onclick="showCookieModal()" style="width: 100%;">
                                <i class="ti ti-cookie"></i>
                                <span class="menu-text" style="margin-left: 8px;">GDPR / Cookies</span>
                            </button>

                        </nav>
                    </article>
                    <button class="user-avatar-button"
                            id="profileToggle"
                            aria-label="Toggle profile menu">
                        <div class="avatar-container">
                            @if (!string.IsNullOrEmpty(ViewBag.ProfileImage as string))
                            {
                                <img src="@ViewBag.ProfileImage" alt="Avatar" class="avatar-img" />
                            }
                            else
                            {
                                <div class="avatar-initials" style="font-size: 14px; line-height: 1;">
                                    @((ViewBag.UserName as string)?.Substring(0, 2).ToUpper())
                                </div>
                            }
                        </div>
                    </button>



                </div>
                <article class="profile-menu" id="profileMenu" hidden>
                    <header class="profile-header">
                        <div class="avatar-container">
                            @if (!string.IsNullOrEmpty(ViewBag.ProfileImage as string))
                            {
                                <img src="@ViewBag.ProfileImage" alt="Avatar" class="avatar-img" />
                            }
                            else
                            {
                                <div class="avatar-initials" style="font-size: 14px; line-height: 1;">
                                    @((ViewBag.UserName as string)?.Substring(0, 2).ToUpper())
                                </div>
                            }
                        </div>


                        <h2 class="profile-name">@User.Identity?.Name</h2>

                    </header>

                    <hr class="menu-divider" />

                    <nav class="menu-options">
                        <button class="menu-item settings-item" onclick="location.href='@Url.Action("Index", "MinaSidor")'">
                            <i class="ti ti-user"></i>
                            <span class="menu-text">Mina sidor</span>
                        </button>

                        <form asp-controller="Auth" asp-action="Logout" method="post">
                            <button class="menu-item logout-item" type="submit">
                                <i class="ti ti-logout"></i>
                                <span class="menu-text">Logout</span>
                            </button>
                        </form>

                    </nav>
                </article>
            </header>

            @RenderBody()
            <!-- Tom behållare för att injicera cookiemodalen -->
            <div id="cookieConsentModal" class="cookie-modal" hidden>
                @await Html.PartialAsync("_CookieConsentInApp")
            </div>




        </main>
    </div>





    @RenderSection("Scripts", required: false)
    <!-- 1. Header-menyer: Profil, Inställningar & Notifications -->
    <script>
        const profileToggle = document.getElementById("profileToggle");
        const profileMenu = document.getElementById("profileMenu");
        const settingsToggle = document.getElementById("settingsToggle");
        const settingsMenu = document.getElementById("settingsMenu");
        const notificationsToggle = document.getElementById(
            "notificationsToggle"
        );
        const notificationsCard = document.getElementById("notificationsCard");

        // 🔁 För att också stänga projektdropdowns
        const allDropdowns = document.querySelectorAll(".dropdown-menu");

        function closeMenusExcept(exception) {
            if (exception !== "profile") profileMenu.hidden = true;
            if (exception !== "settings") settingsMenu.hidden = true;
            if (exception !== "dropdown") {
                allDropdowns.forEach((dropdown) => {
                    dropdown.style.display = "none";
                });
            }
            if (exception !== "notifications" && notificationsCard) {
                notificationsCard.hidden = true;
            }
        }

        profileToggle.addEventListener("click", (e) => {
            e.stopPropagation();
            const isHidden = profileMenu.hidden;
            closeMenusExcept("profile");
            profileMenu.hidden = !isHidden;
        });

        settingsToggle.addEventListener("click", (e) => {
            e.stopPropagation();
            const isHidden = settingsMenu.hidden;
            closeMenusExcept("settings");
            settingsMenu.hidden = !isHidden;
        });

        notificationsToggle?.addEventListener("click", (e) => {
            e.stopPropagation();
            const isHidden = notificationsCard.hidden;
            closeMenusExcept("notifications");
            notificationsCard.hidden = !isHidden;
        });

        document.addEventListener("click", (e) => {
            if (
                !profileMenu.contains(e.target) &&
                !profileToggle.contains(e.target) &&
                !settingsMenu.contains(e.target) &&
                !settingsToggle.contains(e.target) &&
                (!notificationsCard || !notificationsCard.contains(e.target)) &&
                (!notificationsToggle || !notificationsToggle.contains(e.target))
            ) {
                closeMenusExcept(); // Stänger alla
            }
        });
    </script>

    <!-- Script 2: Dropdown-menyhantering -->
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const allMenuButtons = document.querySelectorAll(
                ".projects-menu-button, .member-menu-button"
            );
            const allDropdowns = document.querySelectorAll(".dropdown-menu");
            const profileMenu = document.getElementById("profileMenu");
            const settingsMenu = document.getElementById("settingsMenu");

            allMenuButtons.forEach((button) => {
                const dropdown = button
                    .closest(".member-card, .project-card")
                    ?.querySelector(".dropdown-menu");

                button.addEventListener("click", (e) => {
                    e.stopPropagation();

                    allDropdowns.forEach((d) => {
                        if (d !== dropdown) d.style.display = "none";
                    });

                    if (profileMenu) profileMenu.hidden = true;
                    if (settingsMenu) settingsMenu.hidden = true;

                    dropdown.style.display =
                        dropdown.style.display === "block" ? "none" : "block";
                });
            });
        });

        // ✅ Global kontroll: stäng bara dropdown om inget modal-klick precis skedde
        document.addEventListener("click", (e) => {
            if (window.suppressDropdownClose) {
                window.suppressDropdownClose = false;
                return;
            }

            const isInDropdown = e.target.closest(".dropdown-menu");
            const isInMenuButton = e.target.closest(
                ".projects-menu-button, .member-menu-button"
            );

            if (!isInDropdown && !isInMenuButton) {
                document.querySelectorAll(".dropdown-menu").forEach((dropdown) => {
                    dropdown.style.display = "none";
                });
            }
        });
    </script>
    <!-- 8. Sökfunktion i toppfältet med dropdown och tangentbordsnavigering -->
    <script>
        const searchInput = document.querySelector(".search-input");
        const searchContainer = document.querySelector(".search-container");

        const dropdown = document.createElement("ul");
        dropdown.className = "suggestions-list";
        dropdown.style.position = "absolute";
        dropdown.style.top = "100%";
        dropdown.style.left = "0";
        dropdown.style.width = "100%";
        dropdown.style.zIndex = "9999";
        dropdown.style.maxHeight = "200px";
        dropdown.style.overflowY = "auto";
        dropdown.style.display = "none";

        searchContainer.style.position = "relative";
        searchContainer.appendChild(dropdown);

        const searchData = [
            { type: "project", name: "Website Redesign" },
            { type: "project", name: "Mobile App Launch" },
            { type: "member", name: "Therése Lidbom" },
            { type: "member", name: "Hans Mattin-Lassei" },
            { type: "member", name: "Emma Sjöström" },
        ];

        let currentSearchSuggestions = [];
        let activeSearchIndex = -1;

        function showSearchSuggestions(query) {
            dropdown.innerHTML = "";
            const lowerQuery = query.toLowerCase();

            const results = searchData.filter((item) =>
                item.name.toLowerCase().includes(lowerQuery)
            );

            if (results.length === 0) {
                dropdown.style.display = "none";
                return;
            }

            dropdown.style.display = "block";
            currentSearchSuggestions = results;

            results.forEach((item, index) => {
                const li = document.createElement("li");
                li.textContent = `${item.name} (${item.type})`;
                li.style.padding = "10px 14px";
                li.style.cursor = "pointer";
                li.style.fontFamily = "Nunito, sans-serif";
                li.style.fontSize = "15px";

                if (activeSearchIndex === index) {
                    li.classList.add("active");
                }

                li.addEventListener("mousedown", (e) => {
                    e.preventDefault();
                    alert(`Navigera till ${item.type}: ${item.name}`);
                    dropdown.style.display = "none";
                    searchInput.value = "";
                });

                dropdown.appendChild(li);
            });
        }

        searchInput.addEventListener("input", (e) => {
            const query = e.target.value.trim();
            activeSearchIndex = -1;
            if (query.length > 0) {
                showSearchSuggestions(query);
            } else {
                dropdown.style.display = "none";
            }
        });

        searchInput.addEventListener("keydown", (e) => {
            const options = dropdown.querySelectorAll("li");

            if (e.key === "ArrowDown" && activeSearchIndex < options.length - 1) {
                if (activeSearchIndex >= 0) {
                    options[activeSearchIndex].classList.remove("active");
                }
                activeSearchIndex++;
                options[activeSearchIndex].classList.add("active");
            } else if (e.key === "ArrowUp" && activeSearchIndex > 0) {
                options[activeSearchIndex].classList.remove("active");
                activeSearchIndex--;
                options[activeSearchIndex].classList.add("active");
            } else if (e.key === "Enter" && activeSearchIndex >= 0) {
                e.preventDefault();
                const selected = currentSearchSuggestions[activeSearchIndex];
                alert(`Navigera till ${selected.type}: ${selected.name}`);
                searchInput.value = "";
                dropdown.style.display = "none";
            }
        });

        // Dölj dropdown vid klick utanför eller förlorat fokus
        document.addEventListener("click", (e) => {
            if (!searchContainer.contains(e.target)) {
                dropdown.style.display = "none";
            }
        });

        // Dölj dropdown när man tappar fokus från inputen
        searchInput.addEventListener("blur", () => {
            setTimeout(() => {
                dropdown.style.display = "none";
            }, 100); // timeout för att hinna klicka på item
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const cookieButton = document.querySelector('.settings-menu button[onclick="showCookieModal()"]');
            const modal = document.getElementById("cookieConsentModal");

            if (cookieButton && modal) {
                cookieButton.addEventListener("click", () => {
                    modal.removeAttribute("hidden");
                });
            }
        });
    </script>

    <!-- 🛎️ SignalR - Markera som läst & animera bort + snackbar -->
    <script>
        document.addEventListener("click", async (e) => {
            if (e.target.closest(".notification-close")) {
                const article = e.target.closest(".notification-item");
                const id = article.dataset.id;
                if (!id) return;

                try {
                    await fetch(`/notifications/mark-read/${id}`, { method: "POST" });
                } catch (err) {
                    console.error("Kunde inte markera notifikation som läst:", err);
                }

                article.classList.add("fade-out");
                setTimeout(() => article.remove(), 300);

                const countElem = document.getElementById("notificationCount");
                const current = parseInt(countElem.textContent) || 0;
                if (current > 0) countElem.textContent = current - 1;

                showSnackbar("Notifikation markerad som läst");
            }
        });

        function showSnackbar(message) {
            const snackbar = document.getElementById("snackbar");
            snackbar.textContent = message;
            snackbar.classList.add("show");

            setTimeout(() => {
                snackbar.classList.remove("show");
            }, 3000); // visas i 3 sekunder
        }
    </script>


    <!-- 🛎️ SignalR - Markera som läst & animera bort -->
    <script>
        document.addEventListener("click", async (e) => {
            if (e.target.closest(".notification-close")) {
                const article = e.target.closest(".notification-item");
                const id = article.dataset.id;
                if (!id) return;

                try {
                    await fetch(`/notifications/mark-read/${id}`, { method: "POST" });
                } catch (err) {
                    console.error("Kunde inte markera notifikation som läst:", err);
                }

                // Lägg till fade-out klass och ta bort efter animation
                article.classList.add("fade-out");
                setTimeout(() => article.remove(), 300); // Matchar transition-duration

                const countElem = document.getElementById("notificationCount");
                const current = parseInt(countElem.textContent) || 0;
                if (current > 0) countElem.textContent = current - 1;
            }
        });
    </script>
    <!--Script for Notification count in menu-->
    <script>
        const notificationCountEl = document.getElementById("notificationCount");
        let notificationCount = 0;

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub")
            .build();

        connection.on("ReceiveNotification", function (title, message) {
            notificationCount++;
            notificationCountEl.textContent = notificationCount;
            notificationCountEl.hidden = false;
        });

        connection.start().catch(err => console.error(err.toString()));
    </script>
    <!--script för att synka notification counts-->
    <script>
        document.addEventListener("DOMContentLoaded", async () => {
            try {
                const res = await fetch("/notifications/getunreadcount");
                const count = await res.json();
                const el = document.getElementById("notificationCount");
                if (count > 0) {
                    el.textContent = count;
                    el.hidden = false;
                } else {
                    el.hidden = true;
                }
            } catch (err) {
                console.error("Kunde inte hämta notifikationscount:", err);
            }
        });

    </script>
    <!--SignalR för roll uppdatering-->
    <script>
        // JavaScript (frontend)
        setInterval(() => {
            fetch("/api/user/check-claims-version").then(res => {
                if (res.status === 409) location.reload(); // reload if server says "you’re outdated"
            });
        }, 10000);

    </script>
    <!-- 🧩 Snackbar för bekräftelser -->
    <div id="snackbar" class="snackbar">Notifikation markerad som läst</div>

    

</body>
</html>
