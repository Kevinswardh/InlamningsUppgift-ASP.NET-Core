@* _AppLayout *@
@{
    var currentController = ViewContext.RouteData.Values["controller"]?.ToString();
    var isUser = User?.Identity?.IsAuthenticated == true && User.IsInRole("User");
    var isManager = User?.Identity?.IsAuthenticated == true && User.IsInRole("Manager");
    var isTeamMember = User?.Identity?.IsAuthenticated == true && User.IsInRole("TeamMember");
    var isCustomer = User?.Identity?.IsAuthenticated == true && User.IsInRole("Customer");
    var isAdmin = User?.Identity?.IsAuthenticated == true && User.IsInRole("Admin");


    var canSeeProjects = isTeamMember || isCustomer || isManager || isAdmin;
    var canSeeCustomers = isTeamMember || isManager || isAdmin;
    var canSeeTeamMembers = isTeamMember || isCustomer || isManager || isAdmin;
    var canSeeManagers = true;
    var canSeeNewMembers = isManager || isAdmin;
}
@using System.Security.Claims


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@700&family=Nunito:wght@400;600;700&display=swap"
          rel="stylesheet" />
    @{
        bool isDark = false;

        if (User.Identity != null && User.Identity.IsAuthenticated)
        {
            var claim = ((ClaimsIdentity)User.Identity).FindFirst("darkMode");
            isDark = string.Equals(claim?.Value, "true", StringComparison.OrdinalIgnoreCase);
        }

        ViewBag.IsDark = isDark; // 🟢 Sätt alltid ViewBag.IsDark
    }

    <!-- Grundstilar: alltid -->
    <link rel="stylesheet" href="~/css/site.css" />

    <!-- Dark mode: bara om aktivt -->
    @if (ViewBag.IsDark == true)
    {
        <link rel="stylesheet" href="~/css/site-dark.css" />
    }


    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/@@tabler/icons-webfont@latest/tabler-icons.min.css" />
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css"
          rel="stylesheet" />

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

    @RenderSection("Styles", required: false)
</head>
<body>

    <!-- HTML body content continues after this -->
    <div class="dashboard">
        <nav class="sidebar">
            <div class="sidebar-header">
                <img src="@Url.Content("~/Pictures/Icons/Logo.svg")" alt="Logo" class="logo" />
                <span class="logo-text">alpha</span>
            </div>

            @if (canSeeProjects)
            {
                <a asp-controller="Projects" asp-action="Index" class="nav-item @(currentController == "Projects" ? "active" : "")">
                    <i class="ti ti-folder"></i>
                    <span>Projects</span>
                </a>
            }

            @if (canSeeManagers)
            {
                <a asp-controller="Managers" asp-action="Index" class="nav-item @(currentController == "Managers" ? "active" : "")">
                    <i class="ti ti-user"></i>
                    <span>Managers</span>
                </a>
            }

            @if (canSeeTeamMembers)
            {
                <a asp-controller="Teammembers" asp-action="Index" class="nav-item @(currentController == "Teammembers" ? "active" : "")">
                    <i class="ti ti-users"></i>
                    <span>Team members</span>
                </a>
            }

            @if (canSeeCustomers)
            {
                <a asp-controller="Customers" asp-action="Index" class="nav-item @(currentController == "Customers" ? "active" : "")">
                    <i class="ti ti-address-book"></i>
                    <span>Customers</span>
                </a>
            }

            @if (canSeeNewMembers)
            {
                <a asp-controller="NewMembers" asp-action="Index" class="nav-item @(currentController == "NewMembers" ? "active" : "")">
                    <i class="ti ti-address-book"></i>
                    <span>New member</span>
                </a>
            }
        </nav>

        <main class="main-content">
            <header class="top-bar">
                <div class="search-container">
                    <i class="ti ti-search"></i>
                    <input type="text"
                           placeholder="Search anything..."
                           class="search-input" />
                </div>
                <div class="user-controls">
                    <!-- Klockikonen -->
                    <button class="icon-button" id="notificationsToggle" style="position: relative;">
                        <i class="ti ti-bell"></i>
                        <span id="notificationCountIcon"
                              style="position: absolute; top: -5px; right: -5px; background-color: red; color: white;
             font-size: 0.75rem; padding: 2px 6px; border-radius: 50%; display: inline-block;"
                              hidden>
                            0
                        </span>

                    </button>



                    @await Component.InvokeAsync("NotificationCard")


                    <button class="icon-button">
                        <i class="ti ti-settings" id="settingsToggle"></i>
                    </button>
                    <article class="settings-menu" id="settingsMenu" hidden>
                        <header class="settings-header">
                            <div class="settings-icon-container">
                                <i class="ti ti-settings settings-icon-large"></i>
                            </div>
                            <h2 class="settings-title">Inställningar</h2>
                        </header>

                        <hr class="menu-divider" />

                        <nav class="menu-options">
                            <form asp-controller="Settings" asp-action="ToggleDarkMode" method="post" class="darkmode-form">
                                <button type="submit" name="enable" value="@(ViewBag.IsDark ? "false" : "true")" class="menu-item settings-item" style="width: 100%;">
                                    <i class="ti ti-moon"></i>
                                    <span class="menu-text" style="margin-left: 8px;">
                                        @(ViewBag.IsDark ? "Light Mode" : "Dark Mode")
                                    </span>
                                </button>
                            </form>

                            <button type="button" class="menu-item settings-item" onclick="showCookieModal()" style="width: 100%;">
                                <i class="ti ti-cookie"></i>
                                <span class="menu-text" style="margin-left: 8px;">GDPR / Cookies</span>
                            </button>

                        </nav>
                    </article>
                    <button class="user-avatar-button"
                            id="profileToggle"
                            aria-label="Toggle profile menu">
                        <div class="avatar-container">
                            @if (!string.IsNullOrEmpty(ViewBag.ProfileImage as string))
                            {
                                <img src="@ViewBag.ProfileImage" alt="Avatar" class="avatar-img" />
                            }
                            else
                            {
                                <div class="avatar-initials" style="font-size: 14px; line-height: 1;">
                                    @((ViewBag.UserName as string)?.Substring(0, 2).ToUpper())
                                </div>
                            }
                        </div>
                    </button>



                </div>
                <article class="profile-menu" id="profileMenu" hidden>
                    <header class="profile-header">
                        <div class="avatar-container">
                            @if (!string.IsNullOrEmpty(ViewBag.ProfileImage as string))
                            {
                                <img src="@ViewBag.ProfileImage" alt="Avatar" class="avatar-img" />
                            }
                            else
                            {
                                <div class="avatar-initials" style="font-size: 14px; line-height: 1;">
                                    @((ViewBag.UserName as string)?.Substring(0, 2).ToUpper())
                                </div>
                            }
                        </div>


                        <h2 class="profile-name">@User.Identity?.Name</h2>

                    </header>

                    <hr class="menu-divider" />

                    <nav class="menu-options">
                        <button class="menu-item settings-item" onclick="location.href='@Url.Action("Index", "MinaSidor")'">
                            <i class="ti ti-user"></i>
                            <span class="menu-text">Mina sidor</span>
                        </button>
                        @if (isManager || isAdmin)
                        {
                            <button class="menu-item settings-item" onclick="location.href='@Url.Action("Index", "AdminPage")'">
                                <i class="ti ti-shield-lock"></i>
                                <span class="menu-text">Admin Page</span>
                            </button>
                        }

                        <form asp-controller="Auth" asp-action="Logout" method="post">
                            <button class="menu-item logout-item" type="submit">
                                <i class="ti ti-logout"></i>
                                <span class="menu-text">Logout</span>
                            </button>
                        </form>

                    </nav>
                </article>
            </header>

            @RenderBody()
            <!-- Tom behållare för att injicera cookiemodalen -->
            <div id="cookieConsentModal" class="cookie-modal" hidden></div>





        </main>


    </div>
    <!-- Global chat-modal -->
    <div class="chat-modal" id="chatModal">
        <div class="chat-header">
            <h3 id="chatUserName">Chat with...</h3>
            <button onclick="closeChatModal()">×</button>
        </div>

        <!-- Kontroll för att ladda tidigare -->
        <div class="chat-history-control">
            <button id="loadOlderMessagesBtn" class="load-more-button" onclick="loadChatHistory()">Visa tidigare meddelanden</button>
        </div>

        <!-- Meddelanden visas här -->
        <div class="chat-messages" id="chatMessages">
          
        </div>

        <!-- Skrivfält -->
        <div class="chat-input">
            <button type="button" class="emoji-button" onclick="showEmojiShortcutTip()">😊</button>
            <span id="emojiTip" class="emoji-tip" hidden>Tryck Win + . för emojis 💡</span>
            <input type="text" id="chatInput" placeholder="Skriv ett meddelande..." />
            <button onclick="sendMessage()">Skicka</button>
        </div>
    </div>

    <!-- Chat-bubbla -->
    <div id="globalChatLauncher" class="chat-launcher hidden">
        <button class="chat-launcher-button" id="chatLauncherButton" aria-label="Open chat">
            💬
            <span id="chatBadge" class="chat-badge hidden">1</span>
        </button>
    </div>




    @RenderSection("Scripts", required: false)
    <!-- 1. Header-menyer: Profil, Inställningar & Notifications -->
    <script>
        const profileToggle = document.getElementById("profileToggle");
        const profileMenu = document.getElementById("profileMenu");
        const settingsToggle = document.getElementById("settingsToggle");
        const settingsMenu = document.getElementById("settingsMenu");
        const notificationsToggle = document.getElementById(
            "notificationsToggle"
        );
        const notificationsCard = document.getElementById("notificationsCard");

        // 🔁 För att också stänga projektdropdowns
        const allDropdowns = document.querySelectorAll(".dropdown-menu");

        function closeMenusExcept(exception) {
            if (exception !== "profile") profileMenu.hidden = true;
            if (exception !== "settings") settingsMenu.hidden = true;
            if (exception !== "dropdown") {
                allDropdowns.forEach((dropdown) => {
                    dropdown.style.display = "none";
                });
            }
            if (exception !== "notifications" && notificationsCard) {
                notificationsCard.hidden = true;
            }
        }

        profileToggle.addEventListener("click", (e) => {
            e.stopPropagation();
            const isHidden = profileMenu.hidden;
            closeMenusExcept("profile");
            profileMenu.hidden = !isHidden;
        });

        settingsToggle.addEventListener("click", (e) => {
            e.stopPropagation();
            const isHidden = settingsMenu.hidden;
            closeMenusExcept("settings");
            settingsMenu.hidden = !isHidden;
        });

        notificationsToggle?.addEventListener("click", (e) => {
            e.stopPropagation();
            const isHidden = notificationsCard.hidden;
            closeMenusExcept("notifications");
            notificationsCard.hidden = !isHidden;
        });

        document.addEventListener("click", (e) => {
            if (
                !profileMenu.contains(e.target) &&
                !profileToggle.contains(e.target) &&
                !settingsMenu.contains(e.target) &&
                !settingsToggle.contains(e.target) &&
                (!notificationsCard || !notificationsCard.contains(e.target)) &&
                (!notificationsToggle || !notificationsToggle.contains(e.target))
            ) {
                closeMenusExcept(); // Stänger alla
            }
        });
    </script>

    <!-- Script 2: Dropdown-menyhantering -->
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const allMenuButtons = document.querySelectorAll(
                ".projects-menu-button, .member-menu-button"
            );
            const allDropdowns = document.querySelectorAll(".dropdown-menu");
            const profileMenu = document.getElementById("profileMenu");
            const settingsMenu = document.getElementById("settingsMenu");

            allMenuButtons.forEach((button) => {
                const dropdown = button
                    .closest(".member-card, .project-card")
                    ?.querySelector(".dropdown-menu");

                button.addEventListener("click", (e) => {
                    e.stopPropagation();

                    allDropdowns.forEach((d) => {
                        if (d !== dropdown) d.style.display = "none";
                    });

                    if (profileMenu) profileMenu.hidden = true;
                    if (settingsMenu) settingsMenu.hidden = true;

                    dropdown.style.display =
                        dropdown.style.display === "block" ? "none" : "block";
                });
            });
        });

        // ✅ Global kontroll: stäng bara dropdown om inget modal-klick precis skedde
        document.addEventListener("click", (e) => {
            if (window.suppressDropdownClose) {
                window.suppressDropdownClose = false;
                return;
            }

            const isInDropdown = e.target.closest(".dropdown-menu");
            const isInMenuButton = e.target.closest(
                ".projects-menu-button, .member-menu-button"
            );

            if (!isInDropdown && !isInMenuButton) {
                document.querySelectorAll(".dropdown-menu").forEach((dropdown) => {
                    dropdown.style.display = "none";
                });
            }
        });
    </script>
    <!-- 8. Sökfunktion i toppfältet med dropdown och tangentbordsnavigering -->
    <script>
        const searchInput = document.querySelector(".search-input");
        const searchContainer = document.querySelector(".search-container");

        const dropdown = document.createElement("ul");
        dropdown.className = "suggestions-list";
        dropdown.style.position = "absolute";
        dropdown.style.top = "100%";
        dropdown.style.left = "0";
        dropdown.style.width = "100%";
        dropdown.style.zIndex = "9999";
        dropdown.style.maxHeight = "200px";
        dropdown.style.overflowY = "auto";
        dropdown.style.display = "none";

        searchContainer.style.position = "relative";
        searchContainer.appendChild(dropdown);

        const searchData = [
            { type: "project", name: "Website Redesign" },
            { type: "project", name: "Mobile App Launch" },
            { type: "member", name: "Therése Lidbom" },
            { type: "member", name: "Hans Mattin-Lassei" },
            { type: "member", name: "Emma Sjöström" },
        ];

        let currentSearchSuggestions = [];
        let activeSearchIndex = -1;

        function showSearchSuggestions(query) {
            dropdown.innerHTML = "";
            const lowerQuery = query.toLowerCase();

            const results = searchData.filter((item) =>
                item.name.toLowerCase().includes(lowerQuery)
            );

            if (results.length === 0) {
                dropdown.style.display = "none";
                return;
            }

            dropdown.style.display = "block";
            currentSearchSuggestions = results;

            results.forEach((item, index) => {
                const li = document.createElement("li");
                li.textContent = `${item.name} (${item.type})`;
                li.style.padding = "10px 14px";
                li.style.cursor = "pointer";
                li.style.fontFamily = "Nunito, sans-serif";
                li.style.fontSize = "15px";

                if (activeSearchIndex === index) {
                    li.classList.add("active");
                }

                li.addEventListener("mousedown", (e) => {
                    e.preventDefault();
                    alert(`Navigera till ${item.type}: ${item.name}`);
                    dropdown.style.display = "none";
                    searchInput.value = "";
                });

                dropdown.appendChild(li);
            });
        }

        searchInput.addEventListener("input", (e) => {
            const query = e.target.value.trim();
            activeSearchIndex = -1;
            if (query.length > 0) {
                showSearchSuggestions(query);
            } else {
                dropdown.style.display = "none";
            }
        });

        searchInput.addEventListener("keydown", (e) => {
            const options = dropdown.querySelectorAll("li");

            if (e.key === "ArrowDown" && activeSearchIndex < options.length - 1) {
                if (activeSearchIndex >= 0) {
                    options[activeSearchIndex].classList.remove("active");
                }
                activeSearchIndex++;
                options[activeSearchIndex].classList.add("active");
            } else if (e.key === "ArrowUp" && activeSearchIndex > 0) {
                options[activeSearchIndex].classList.remove("active");
                activeSearchIndex--;
                options[activeSearchIndex].classList.add("active");
            } else if (e.key === "Enter" && activeSearchIndex >= 0) {
                e.preventDefault();
                const selected = currentSearchSuggestions[activeSearchIndex];
                alert(`Navigera till ${selected.type}: ${selected.name}`);
                searchInput.value = "";
                dropdown.style.display = "none";
            }
        });

        // Dölj dropdown vid klick utanför eller förlorat fokus
        document.addEventListener("click", (e) => {
            if (!searchContainer.contains(e.target)) {
                dropdown.style.display = "none";
            }
        });

        // Dölj dropdown när man tappar fokus från inputen
        searchInput.addEventListener("blur", () => {
            setTimeout(() => {
                dropdown.style.display = "none";
            }, 100); // timeout för att hinna klicka på item
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const cookieButton = document.querySelector('.settings-menu button[onclick="showCookieModal()"]');
            const modal = document.getElementById("cookieConsentModal");

            if (cookieButton && modal) {
                cookieButton.addEventListener("click", () => {
                    modal.removeAttribute("hidden");
                });
            }
        });
    </script>


    <!--Signal R för notifications-->
    <script>
        const iconCountEl = document.getElementById("notificationCountIcon");
        const cardCountEl = document.getElementById("notificationCountCard");

        // SignalR-anslutning
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub")
            .build();

        connection.on("ReceiveNotification", function (title, message) {
            // Öka båda räknarna
            updateNotificationCount(1);
        });

        connection.start().catch(err => console.error(err.toString()));

        // Klick på stäng-knappen
        document.addEventListener("click", async (e) => {
            if (e.target.closest(".notification-close")) {
                const article = e.target.closest(".notification-item");
                const id = article.dataset.id;
                if (!id) return;

                try {
                    await fetch(`/notifications/mark-read/${id}`, { method: "POST" });
                } catch (err) {
                    console.error("Kunde inte markera notifikation som läst:", err);
                }

                article.classList.add("fade-out");
                setTimeout(() => article.remove(), 300);
                updateNotificationCount(-1);
            }
        });

        // Ladda in antalet vid sidladdning
        document.addEventListener("DOMContentLoaded", async () => {
            try {
                const res = await fetch("/notifications/getunreadcount");
                const count = await res.json();
                setCountText(count);
            } catch (err) {
                console.error("Kunde inte hämta notifikationscount:", err);
            }
        });

        function updateNotificationCount(change) {
            const current = parseInt(iconCountEl.textContent) || 0;
            const updated = Math.max(0, current + change);
            setCountText(updated);
        }

        function setCountText(count) {
            const shouldHide = count <= 0;

            if (shouldHide) {
                iconCountEl.style.display = "none";
                cardCountEl.style.display = "none";
            } else {
                iconCountEl.style.display = "inline-block";
                cardCountEl.style.display = "inline-block";
                iconCountEl.textContent = count;
                cardCountEl.textContent = count;
            }
        }


    </script>
  

    <!--SignalR för roll uppdatering-->
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const userConnection = new signalR.HubConnectionBuilder()
                .withUrl("/userhub")
                .build();

            userConnection.on("RefreshClaims", async () => {
                console.log("📡 RefreshClaims mottaget");

                try {
                    const res = await fetch("/Users/RefreshClaims", { method: "POST" });
                    if (res.ok) {
                        console.log("✅ Claims uppdaterade – laddar om");
                        location.reload();
                    } else {
                        console.warn("❌ Kunde inte uppdatera claims – loggar ut");
                        location.href = "/Auth/Logout";
                    }
                } catch (err) {
                    console.error("❌ SignalR-fel:", err);
                }
            });

            userConnection.start()
                .then(() => console.log("✅ SignalR userhub igång"))
                .catch(err => console.error("❌ SignalR userhub error:", err));
        });
    </script>
    <script>
        console.log("signalR finns?", typeof signalR); // ska visa "function"
    </script>
    <script>
        function showCookieModal() {
            const modal = document.getElementById("cookieConsentModal");

            fetch("/Settings/CookieConsentModal")
                .then(res => res.text())
                .then(html => {
                    modal.innerHTML = html;
                    modal.removeAttribute("hidden");
                });
        }
    </script>


    
    <!--!-->
    <!-- 🧩 Snackbar för bekräftelser -->
    <div id="snackbar" class="snackbar">Notifikation markerad som läst</div>

    <script>
        let currentChatUser = null;
        let chatConnection = null;
        const pendingMessages = {}; // { email: [msg1, msg2] }
        let unreadChatCount = 0;
        let lastSenderEmail = null;
        let skipCount = 0;

        function showChatLauncher(fromEmail) {
            if (fromEmail === window.currentUserEmail) return; // 👈 förhindra ikon till avsändaren

            console.log("🔔 showChatLauncher() körs för:", fromEmail);
            const launcher = document.getElementById("globalChatLauncher");
            const badge = launcher?.querySelector(".chat-badge");

            if (!launcher || !badge) {
                console.warn("❌ Kunde inte hitta chatt-launcher eller badge");
                return;
            }

            unreadChatCount++;
            lastSenderEmail = fromEmail;

            badge.textContent = unreadChatCount;
            badge.classList.remove("hidden");
            launcher.classList.remove("hidden");

            console.log("📢 Chattbubbla visad med count =", unreadChatCount);
        }

        function hideChatLauncher() {
            const launcher = document.getElementById("globalChatLauncher");
            const badge = launcher?.querySelector(".chat-badge");

            if (!launcher || !badge) return;

            unreadChatCount = 0;
            badge.textContent = "";
            badge.classList.add("hidden");
            launcher.classList.add("hidden");
        }

        function openChatModal(email, name) {
            const modal = document.getElementById('chatModal');
            if (!modal) return;

            currentChatUser = email;
            skipCount = 0;
            modal.classList.add('show');
            modal.style.display = 'flex';
            document.getElementById('chatUserName').innerText = `Chat with ${name}`;
            document.getElementById('chatMessages').innerHTML = '';

            // buffrade meddelanden
            if (pendingMessages[email]?.length) {
                pendingMessages[email].forEach(msg => appendMessageBubble(email, msg));
                pendingMessages[email] = [];
            }

            loadChatHistory(); // 👈 ny funktion
        }

        function closeChatModal() {
            currentChatUser = null;
            const modal = document.getElementById('chatModal');
            if (modal) {
                modal.classList.remove('show');
                modal.style.display = 'none';
            }
        }

        function appendMessageBubble(fromEmail, message) {
            if (!message || !fromEmail) return;

            const isMine = fromEmail === window.currentUserEmail;
            const msgDiv = document.createElement("div");
            msgDiv.classList.add("chat-bubble");
            msgDiv.classList.add(isMine ? "chat-bubble-right" : "chat-bubble-left");
            msgDiv.textContent = message;

            return msgDiv;
        }

        function renderMessages(messages, prepend = false) {
            const container = document.getElementById("chatMessages");
            const fragment = document.createDocumentFragment();

            messages.forEach(msg => {
                if (msg?.fromEmail && msg?.content) {
                    const bubble = appendMessageBubble(msg.fromEmail, msg.content);
                    fragment.appendChild(bubble);
                }
            });

            if (prepend) {
                container.prepend(fragment);
            } else {
                container.appendChild(fragment);
                container.scrollTop = container.scrollHeight;
            }

            skipCount += messages.length;
        }

        function loadChatHistory() {
            if (!currentChatUser) return;
            chatConnection?.invoke("LoadChatHistory", currentChatUser, skipCount);
        }

        function sendMessage() {
            const input = document.getElementById('chatInput');
            const message = input?.value.trim();
            if (!message) return;

            const bubble = appendMessageBubble(window.currentUserEmail, message);
            document.getElementById("chatMessages").appendChild(bubble);

            chatConnection?.invoke("SendMessage", currentChatUser, message);
            input.value = "";
        }

        function showEmojiShortcutTip() {
            const tip = document.getElementById("emojiTip");
            tip.hidden = false;
            setTimeout(() => tip.hidden = true, 3000);
        }

        document.addEventListener("DOMContentLoaded", () => {
            document.body.addEventListener("click", (e) => {
                const messageBtn = e.target.closest('.member-message-button');
                if (messageBtn) {
                    openChatModal(messageBtn.dataset.email, messageBtn.dataset.username);
                }

                const closeBtn = e.target.closest('#chatModal .chat-header button');
                if (closeBtn) closeChatModal();

                const sendBtn = e.target.closest('#chatModal .chat-input button:not(.emoji-button)');
                if (sendBtn) sendMessage();

                const emojiBtn = e.target.closest('.emoji-button');
                if (emojiBtn) showEmojiShortcutTip();
            });

            const launcher = document.getElementById("globalChatLauncher");
            launcher?.addEventListener("click", () => {
                if (lastSenderEmail) {
                    openChatModal(lastSenderEmail, lastSenderEmail);
                    hideChatLauncher();
                }
            });

            if (!window.chatHubStarted) {
                window.chatHubStarted = true;

                if (!window.signalR) {
                    console.error("❌ SignalR är inte laddad");
                    return;
                }

                chatConnection = new signalR.HubConnectionBuilder()
                    .withUrl("/chathub")
                    .build();

                chatConnection.on("ReceiveMessage", (fromEmail, message) => {
                    if (!fromEmail || !message) return;

                    if (currentChatUser === fromEmail) {
                        const bubble = appendMessageBubble(fromEmail, message);
                        document.getElementById("chatMessages").appendChild(bubble);
                        document.getElementById("chatMessages").scrollTop = document.getElementById("chatMessages").scrollHeight;
                    } else {
                        pendingMessages[fromEmail] ??= [];
                        pendingMessages[fromEmail].push(message);
                        showChatLauncher(fromEmail);
                    }
                });

                chatConnection.on("LoadChatHistory", (messages, isOlderLoad) => {
                    if (!Array.isArray(messages)) return;
                    renderMessages(messages, isOlderLoad);
                });

                chatConnection.start()
                    .then(() => console.log("✅ ChatHub igång"))
                    .catch(err => console.error("🚨 Kunde inte starta ChatHub:", err));
            }
        });
        document.getElementById("chatInput")?.addEventListener("keydown", function (e) {
            if (e.key === "Enter") {
                e.preventDefault(); // förhindra radbrytning
                sendMessage();
                const container = document.getElementById("chatMessages");
                container.scrollTop = container.scrollHeight; // 🔽 scrolla till botten
            }
        });


    </script>




    <script>
        window.currentUserEmail = '@User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value';
    </script>

   

</body>
</html>
