Använd dig av lättare namngivningar på sakerna så att allt blir lätt innan du börjar släppa tyglarna med erfarenheten.
Numrerade lagren måste gå i ordningen och får inte referera baklänges, hashtag lagren kan vara frikopplade. 


✅ När du har en Project Reference
→ Då kan projektet:

anropa klasser, metoder, properties i det andra projektet

se implementationer

se interna detaljer (public members)

✔️ Alltså: direkt kommunikation & synlighet
Ex: PresentationLayer har referens till ApplicationLayer → den kan direkt anropa MemberService, skapa objekt, etc.

⚠️ När du inte har en Project Reference
→ Då kan du fortfarande kommunicera med projektet, men bara via beroenden som injiceras (t.ex. interfaces)

✔️ Alltså: indirekt kommunikation via Dependency Injection
Du anropar ett interface (ex. IMemberRepository)

Du vet inte vad som händer bakom (d.v.s. hur den implementeras i Infrastructure)

Du ser inte koden där, men du får resultatet

👥 Rollfördelning i ett team med Clean Architecture
🧠 Vad ApplicationLayer (huvudledarna) gör:
De planerar och bestämmer vad applikationen ska göra (use cases)

De säger:

"Vi behöver ett sätt att lägga till en medlem till ett projekt"

De skriver logiken i ApplicationLayer, men:

Använder bara interfaces

Har inga implementationer

🧱 Vad du (t.ex. ansvarig för Infrastructure, DAL eller integration) gör:
De säger till dig:

"Vi har ett interface IMemberRepository, men saknar implementation"

Du:

Implementerar det interfacet i InfrastructureLayer

Om det behövs, lägger till domänmodeller i DomainLayer (ex. Member, MemberId)

Om de saknar data: du utökar modellen

Om datan ska sparas: du skapar eller uppdaterar repository + databaslogik

Du säger:

"Nu finns SqlMemberRepository i Infrastructure. Ni kan använda det via interfacet."

Någon lägger in det i Program.cs:

services.AddScoped<IMemberRepository, SqlMemberRepository>();